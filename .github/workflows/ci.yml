name: CI

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read

env:
  CI: true

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bundle exec brakeman --no-pager

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bundle exec rubocop -f github

  test:
    runs-on: ubuntu-latest

    # services:
    #  redis:
    #    image: redis
    #    ports:
    #      - 6379:6379
    #    options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libyaml-dev pkg-config unzip google-chrome-stable

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Make bin files executable
        run: chmod +x bin/*

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.5

      - name: Build assets
        run: |
          bun install
          bun run build
          bun run build:css

      - name: Prepare test database
        env:
          RAILS_ENV: test
        run: |
          echo "Preparing test database..."
          bin/rails db:test:prepare
          echo "Database preparation completed"

      - name: Run unit and integration tests
        env:
          RAILS_ENV: test
          COVERAGE: true
          # REDIS_URL: redis://localhost:6379/0
        run: |
          echo "Starting test run with coverage..."
          echo "Rails environment: $RAILS_ENV"
          echo "Coverage enabled: $COVERAGE"
          echo "Current directory: $(pwd)"
          echo "Checking Rails application files..."
          ls -la config/
          echo "Checking if this is a Rails app..."
          if [ -f "config/application.rb" ]; then
            echo "Rails application.rb found"
          else
            echo "ERROR: Rails application.rb not found!"
          fi
          echo "Rails version: $(bundle exec rails --version)"
          echo "Running rails test..."
          bin/rails test

      - name: Run system tests
        env:
          RAILS_ENV: test
          COVERAGE: true
          # REDIS_URL: redis://localhost:6379/0
        run: |
          if [ -d "test/system" ]; then
            bin/rails test:system
          else
            echo "No system tests found, skipping..."
          fi

      - name: Check coverage file generation
        run: |
          echo "Checking coverage directory contents..."
          ls -la coverage/ || echo "Coverage directory doesn't exist"
          if [ -f "coverage/.resultset.json" ]; then
            echo "✅ .resultset.json found"
            echo "File size: $(du -h coverage/.resultset.json)"
            echo "First few lines:"
            head -5 coverage/.resultset.json
          else
            echo "❌ .resultset.json not found"
            echo "Available files in coverage/:"
            find coverage/ -type f 2>/dev/null || echo "No files found"
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: success() && hashFiles('coverage/.resultset.json') != ''
        with:
          name: coverage-data
          path: ./coverage/.resultset.json
          retention-days: 1

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  codecov:
    runs-on: ubuntu-latest
    needs: [scan_ruby, lint, test]
    if: always() && needs.test.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        id: download-coverage
        continue-on-error: true
        with:
          name: coverage-data
          path: ./coverage

      - name: Check coverage file after download
        run: |
          if [ -f "./coverage/.resultset.json" ]; then
            echo "✅ Coverage file downloaded successfully"
            echo "File size: $(du -h ./coverage/.resultset.json)"
          else
            echo "❌ Coverage file not found after download"
            echo "Available files:"
            find ./coverage -type f 2>/dev/null || echo "No coverage directory or files"
          fi

      - name: Upload coverage to Codecov
        if: steps.download-coverage.outcome == 'success' && hashFiles('./coverage/.resultset.json') != ''
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Only needed for private repos
          files: ./coverage/.resultset.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: Skip codecov upload
        if: steps.download-coverage.outcome != 'success' || hashFiles('./coverage/.resultset.json') == ''
        run: |
          echo "⚠️ Skipping codecov upload - coverage file not available"
          echo "This is not a failure, it just means coverage data wasn't generated"
